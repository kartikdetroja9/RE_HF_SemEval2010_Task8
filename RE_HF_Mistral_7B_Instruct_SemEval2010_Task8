{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8420364,"sourceType":"datasetVersion","datasetId":5012828}],"dockerImageVersionId":30699,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install -q -U transformers\n!pip install -q -U accelerate\n!pip install -q -U bitsandbytes","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-31T11:52:08.677368Z","iopub.execute_input":"2024-05-31T11:52:08.677657Z","iopub.status.idle":"2024-05-31T11:53:02.962706Z","shell.execute_reply.started":"2024-05-31T11:52:08.677631Z","shell.execute_reply":"2024-05-31T11:53:02.961593Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"import json\n\nimport torch\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\nfrom transformers import pipeline","metadata":{"execution":{"iopub.status.busy":"2024-05-31T11:53:02.965068Z","iopub.execute_input":"2024-05-31T11:53:02.965897Z","iopub.status.idle":"2024-05-31T11:53:19.381902Z","shell.execute_reply.started":"2024-05-31T11:53:02.965854Z","shell.execute_reply":"2024-05-31T11:53:19.381001Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stderr","text":"2024-05-31 11:53:08.498745: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-05-31 11:53:08.498844: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-05-31 11:53:08.630970: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"dataset = \"semeval2010-task8-dataset\"\ndataset_testfile = \"/kaggle/input/semeval2010-task8-dataset/test.json\"\ndataset_trainfile = \"/kaggle/input/semeval2010-task8-dataset/train.json\"\n\nrelations = [\"CAUSE-EFFECT\", \"COMPONENT-WHOLE\", \"CONTENT-CONTAINER\", \"ENTITY-DESTINATION\", \"ENTITY-ORIGIN\", \"INSTRUMENT-AGENCY\", \"MEMBER-COLLECTION\", \"MESSAGE-TOPIC\", \"PRODUCT-PRODUCER\"]\nno_of_relations = len(relations)\nrelation_mapping = {\n    'Cause-Effect(e1,e2)' : \"CAUSE-EFFECT\",\n    'Cause-Effect(e2,e1)' : \"CAUSE-EFFECT\",\n    'Component-Whole(e1,e2)' : \"COMPONENT-WHOLE\",\n    'Component-Whole(e2,e1)' : \"COMPONENT-WHOLE\",\n    'Content-Container(e1,e2)' : \"CONTENT-CONTAINER\",\n    'Content-Container(e2,e1)' : \"CONTENT-CONTAINER\",\n    'Entity-Destination(e1,e2)' : \"ENTITY-DESTINATION\",\n    'Entity-Destination(e2,e1)' : \"ENTITY-DESTINATION\",\n    'Entity-Origin(e1,e2)' : \"ENTITY-ORIGIN\",\n    'Entity-Origin(e2,e1)' : \"ENTITY-ORIGIN\",\n    'Instrument-Agency(e1,e2)' : \"INSTRUMENT-AGENCY\",\n    'Instrument-Agency(e2,e1)' : \"INSTRUMENT-AGENCY\",\n    'Member-Collection(e1,e2)' : \"MEMBER-COLLECTION\",\n    'Member-Collection(e2,e1)' : \"MEMBER-COLLECTION\",\n    'Message-Topic(e1,e2)' : \"MESSAGE-TOPIC\",\n    'Message-Topic(e2,e1)' : \"MESSAGE-TOPIC\",\n    'Product-Producer(e1,e2)' : \"PRODUCT-PRODUCER\",\n    'Product-Producer(e2,e1)' : \"PRODUCT-PRODUCER\",\n    'Other' : \"OTHER \"\n}\n\n# patterns around the entities 1 and 2\ne1_start_pattern = \"<e1>\"\ne1_end_pattern = \"</e1>\"\ne2_start_pattern = \"<e2>\"\ne2_end_pattern = \"</e2>\"\n","metadata":{"execution":{"iopub.status.busy":"2024-05-31T11:53:19.383027Z","iopub.execute_input":"2024-05-31T11:53:19.383525Z","iopub.status.idle":"2024-05-31T11:53:19.390737Z","shell.execute_reply.started":"2024-05-31T11:53:19.383498Z","shell.execute_reply":"2024-05-31T11:53:19.389806Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"def prepare_examples(list_examples):\n    new_list_examples = []\n\n    for example in list_examples:\n        new_example = {}\n\n        # get example text from the dictionary\n        text = \" \".join(example['sentence'])\n\n        # get Entity-1\n        idx1 = text.index(e1_start_pattern) + len(e1_start_pattern)\n        idx2 = text.index(e1_end_pattern)\n        en_1 = text[idx1: idx2].strip()\n\n        # get Entity-2\n        idx1 = text.index(e2_start_pattern) + len(e2_start_pattern)\n        idx2 = text.index(e2_end_pattern)\n        en_2 = text[idx1: idx2].strip()\n\n        # remove <e1>, </e1>, <e2> and </e2> from the text\n        text = text.replace(\"<e1> \", \"\").replace(\"</e1> \", \"\").replace(\"<e2> \", \"\").replace(\"</e2> \", \"\")\n\n        # fill in new dictionary with id, relation, entity and sentence information\n        new_example['id'] = example['id']\n        new_example['relation'] = relation_mapping[example['relation']]\n        new_example['e1'] = en_1\n        new_example['e2'] = en_2\n        new_example['sentence'] = text\n\n        # add new exmple to list\n        new_list_examples.append(new_example)\n\n    return new_list_examples\n\n\ndef read_dataset(json_file):\n    list_examples = []     # empty list of examples\n\n    # open the JSON file\n    with open(json_file) as f: \n        \n        # read all json objects as example dictionaries and store in the example list\n        for json_obj in f:\n            example = json.loads(json_obj)\n            list_examples.append(example)\n\n        # Close the file\n        f.close()\n\n    # return list of examples: each example is dictionary\n    return list_examples\n\n\ndef get_examples():\n    list_examples = read_dataset(dataset_testfile)\n\n    new_list_examples = prepare_examples(list_examples)\n\n    return new_list_examples;\n","metadata":{"execution":{"iopub.status.busy":"2024-05-31T11:53:19.392954Z","iopub.execute_input":"2024-05-31T11:53:19.393211Z","iopub.status.idle":"2024-05-31T11:53:19.403264Z","shell.execute_reply.started":"2024-05-31T11:53:19.393188Z","shell.execute_reply":"2024-05-31T11:53:19.402389Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"get_examples()[0:2]","metadata":{"execution":{"iopub.status.busy":"2024-05-31T11:53:19.404363Z","iopub.execute_input":"2024-05-31T11:53:19.404657Z","iopub.status.idle":"2024-05-31T11:53:19.475191Z","shell.execute_reply.started":"2024-05-31T11:53:19.404634Z","shell.execute_reply":"2024-05-31T11:53:19.474353Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"[{'id': '8001',\n  'relation': 'MESSAGE-TOPIC',\n  'e1': 'audits',\n  'e2': 'waste',\n  'sentence': 'The most common audits were about waste and recycling .'},\n {'id': '8002',\n  'relation': 'PRODUCT-PRODUCER',\n  'e1': 'company',\n  'e2': 'chairs',\n  'sentence': 'The company fabricates plastic chairs .'}]"},"metadata":{}}]},{"cell_type":"code","source":"from huggingface_hub import login\nlogin(token = \"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\")","metadata":{"execution":{"iopub.status.busy":"2024-05-31T11:53:19.476201Z","iopub.execute_input":"2024-05-31T11:53:19.476455Z","iopub.status.idle":"2024-05-31T11:53:19.571284Z","shell.execute_reply.started":"2024-05-31T11:53:19.476432Z","shell.execute_reply":"2024-05-31T11:53:19.570470Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"The token has not been saved to the git credentials helper. Pass `add_to_git_credential=True` in this function directly or `--add-to-git-credential` if using via `huggingface-cli` if you want to set the git credential as well.\nToken is valid (permission: read).\nYour token has been saved to /root/.cache/huggingface/token\nLogin successful\n","output_type":"stream"}]},{"cell_type":"code","source":"torch.manual_seed(7)\n\n#model_name = \"mistralai/Mistral-7B-Instruct-v0.1\"\nmodel_name = \"mistralai/Mistral-7B-Instruct-v0.2\"\n#model_name = \"mistralai/Mistral-7B-Instruct-v0.3\"\n#model_name = \"mistralai/Mixtral-8x7B-Instruct-v0.1\"\n\ntokenizer = AutoTokenizer.from_pretrained(model_name)\n\nmodel = AutoModelForCausalLM.from_pretrained(\n    model_name,\n    device_map = \"auto\",\n    trust_remote_code = True\n)\n\nmodel.generation_config.pad_token_ids = tokenizer.pad_token_id","metadata":{"execution":{"iopub.status.busy":"2024-05-31T11:53:19.572359Z","iopub.execute_input":"2024-05-31T11:53:19.572678Z","iopub.status.idle":"2024-05-31T11:55:44.863887Z","shell.execute_reply.started":"2024-05-31T11:53:19.572631Z","shell.execute_reply":"2024-05-31T11:55:44.862947Z"},"trusted":true},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/1.46k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"239fb45db22e463c93e0170bedb4221f"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.model:   0%|          | 0.00/493k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e4bd37965f26445b8bde8411af8e1fcf"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/1.80M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0dc2a485780743a59913d40d38af91bb"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/72.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"59207d6a0ef24668ae618840e5f8fcf7"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/596 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"423f02cb121b438986ecb5e58be47eee"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model.safetensors.index.json:   0%|          | 0.00/25.1k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6cb4b3b3b9c94d42b4498627ef900f18"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading shards:   0%|          | 0/3 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"cf4abd5a18074be79fa57f8c8dfde7c1"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model-00001-of-00003.safetensors:   0%|          | 0.00/4.94G [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"550175153e7740e0b36d99446ef83f6d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model-00002-of-00003.safetensors:   0%|          | 0.00/5.00G [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e599f377d2674525a2012273ab875051"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model-00003-of-00003.safetensors:   0%|          | 0.00/4.54G [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e1e6bf775eda40a39ab233563d148847"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8985cd236b3c47649c038a81522d51f0"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"generation_config.json:   0%|          | 0.00/111 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"cf8246338a4f4a19acae3f1b1b57b94d"}},"metadata":{}}]},{"cell_type":"code","source":"pipe = pipeline(\n    \"text-generation\",\n    model = model,\n    tokenizer = tokenizer,\n    torch_dtype = torch.bfloat16,\n    device_map = \"auto\"\n)","metadata":{"execution":{"iopub.status.busy":"2024-05-31T11:55:44.865133Z","iopub.execute_input":"2024-05-31T11:55:44.865437Z","iopub.status.idle":"2024-05-31T11:55:44.870568Z","shell.execute_reply.started":"2024-05-31T11:55:44.865410Z","shell.execute_reply":"2024-05-31T11:55:44.869734Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"prompt = '''--------\nTask description: You will predict the relation between two entities given the context. The pre-defined 9 relations are [CAUSE-EFFECT, COMPONENT-WHOLE, CONTENT-CONTAINER, ENTITY-DESTINATION, ENTITY-ORIGIN, INSTRUMENT-AGENCY, MEMBER-COLLECTION, MESSAGE-TOPIC, PRODUCT-PRODUCER]\nYou will output relation OTHER if the relation in the context does not belong to any of the 9 pre-defined relations.\nYou will generate response in the form: The relation between <entity-1> and <entity-2> in this context is: <relation> \n--------\nContext: {}\nIn the given context the relation between entities {} and {} is: '''\n","metadata":{"execution":{"iopub.status.busy":"2024-05-31T11:55:44.871612Z","iopub.execute_input":"2024-05-31T11:55:44.871961Z","iopub.status.idle":"2024-05-31T11:55:44.880236Z","shell.execute_reply.started":"2024-05-31T11:55:44.871936Z","shell.execute_reply":"2024-05-31T11:55:44.879462Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"list_examples = get_examples()\n\nfile_name = \"result_\" + model_name.split(\"/\")[1].replace(\".\", \"\").strip() + \"_\" + dataset + \"1.json\"\nfp = open(file_name, 'w')\n\nfor example in list_examples:\n    #print(\"\\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\")\n    #print(\"Example: \", example['id'], \"\\t\", example['e1'], \n    #          \"\\t\", example['e2'], \"\\t\", example['relation'])\n    print(\"Example: {id:6s} {e1:12s} {e2:12s} {rel:25s}\".format(id=example['id'], e1=example['e1'], \n                                                                e2=example['e2'], rel=example['relation']))\n\n    prompt_text = prompt.format(example['sentence'], example['e1'], example['e2'])\n    #print(\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\")\n    #print(\"Prompt: \\n\", prompt_text)\n    \n    response = pipe(\n        [{\"role\": \"user\", \"content\": prompt_text}],\n        do_sample = True,\n        top_k = 50,\n        top_p = 0.95,\n        max_new_tokens = 40,\n        temperature = 0.7,\n        num_return_sequences = 1,\n        pad_token_id = pipe.tokenizer.eos_token_id)\n\n    result = response[0][\"generated_text\"][1]['content']\n    if \":\" in result:\n        result = result.split(':')[1]\n        if \".\" in result:\n            result = result.split('.')[0]\n    example['predicted_relation'] = result.strip()\n    json.dump(example, fp)\n    #print(\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\")\n    #print(\"Response: \\n\", result)\n    #print(\"\\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\")","metadata":{"execution":{"iopub.status.busy":"2024-05-31T11:55:44.883199Z","iopub.execute_input":"2024-05-31T11:55:44.883488Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"Example: 8001   audits       waste        MESSAGE-TOPIC            \nExample: 8002   company      chairs       PRODUCT-PRODUCER         \nExample: 8003   master       stick        INSTRUMENT-AGENCY        \nExample: 8004   body         reservoir    ENTITY-DESTINATION       \nExample: 8005   influenza    virus        CAUSE-EFFECT             \nExample: 8006   ear          elephant     COMPONENT-WHOLE          \nExample: 8007   lie          parents      PRODUCT-PRODUCER         \nExample: 8008   hookup       users        MEMBER-COLLECTION        \nExample: 8009   room         house        COMPONENT-WHOLE          \nExample: 8010   thesis       clinical characteristics MESSAGE-TOPIC            \n","output_type":"stream"},{"name":"stderr","text":"You seem to be using the pipelines sequentially on GPU. In order to maximize efficiency please use a dataset\n","output_type":"stream"},{"name":"stdout","text":"Example: 8011   survivors    houses       ENTITY-DESTINATION       \nExample: 8012   kimchi       maker        OTHER                    \nExample: 8013   names        space        ENTITY-DESTINATION       \nExample: 8014   landscape    company      PRODUCT-PRODUCER         \nExample: 8015   gift         friend       ENTITY-ORIGIN            \nExample: 8016   young        nest         ENTITY-ORIGIN            \nExample: 8017   actress      airport      ENTITY-DESTINATION       \nExample: 8018   filesharing  internet     OTHER                    \nExample: 8019   zoo          beasts       MEMBER-COLLECTION        \nExample: 8020   song         musician     PRODUCT-PRODUCER         \nExample: 8021   outline      spirituality MESSAGE-TOPIC            \nExample: 8022   bomb         suitcase     CONTENT-CONTAINER        \nExample: 8023   software     company      PRODUCT-PRODUCER         \nExample: 8024   captain      crew         OTHER                    \nExample: 8025   sesame       oil          ENTITY-ORIGIN            \nExample: 8026   housing      developer    PRODUCT-PRODUCER         \nExample: 8027   effect       way          CAUSE-EFFECT             \nExample: 8028   dramas       real events  OTHER                    \n","output_type":"stream"}]},{"cell_type":"code","source":"#for example in list_examples:\n#    print(example['id'], \"\\t\", example['relation'], \"\\t\", example['predicted_relation'], \"\\t\", example['e1'], \"\\t\", example['e2'] )","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"file_name = \"result_\" + model_name.split(\"/\")[1].replace(\".\", \"\").strip() + \"_\" + dataset + \".json\"\n\nwith open(file_name, 'w') as fp:\n    json.dump(list_examples, fp)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"The End\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}